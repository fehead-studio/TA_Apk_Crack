package com.androlua;

import java.io.IOException;
import java.io.Reader;

public class LuaLexer {
  public static final int YYEOF = -1;
  
  public static final int YYINITIAL = 0;
  
  private static final int[] a = { 
      0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 
      5, 5, 6, 6 };
  
  private static final char[] b = a("\t\034\001\003\001\002\001\000\001\003\001\001\016\034\004\033\001\003\001+\001\031\001*\001\004\0010\001:\001\035\0012\0013\001/\001\t\0016\001\016\001\r\0011\001\013\t\006\0018\0017\001-\001\027\001,\001\033\001=\004\007\001\b\001\007\t\004\001\n\007\004\001\f\002\004\001\026\001\032\001\030\0019\001\004\001\033\001\036\001\037\001%\001\025\001\020\001#\001\021\001(\001\022\001\004\001 \001!\001<\001\024\001\023\001'\001\004\001\017\001\"\001&\001$\001\004\001)\001\f\002\004\0014\001;\0015\001.\006\034\001\005\032\034\001\000\001\033\004\004\004\033\001\004\002\033\001\034\007\033\001\004\004\033\001\004\005\033\027\004\001\033\037\004\001\033Ǌ\004\004\033\f\004\016\033\005\004\007\033\001\004\001\033\001\004\021\033p\034\005\004\001\033\002\004\002\033\004\004\b\033\001\004\001\033\003\004\001\033\001\004\001\033\024\004\001\033S\004\001\033\004\001\033\005\034\002\033\004\t\033&\004\002\033\001\004\007\033'\004\007\033\001\004\001\033-\034\001\033\001\034\001\033\002\034\001\033\002\034\001\033\001\034\b\033\033\004\005\033\003\004\r\033\005\034\006\033\001\004\004\033\013\034\005\033+\004\037\034\004\033\002\004\001\034c\004\001\033\001\004\b\034\001\033\006\034\002\004\002\034\001\033\004\034\002\004\n\034\003\004\002\033\001\004\017\033\001\034\001\004\001\034\036\004\033\034\002\033Y\004\013\034\001\004\016\033\n\034!\004\t\034\002\004\004\033\001\004\005\033\026\004\004\034\001\004\t\034\001\004\003\034\001\004\005\034\022\033\031\004\003\034D\033\001\004\001\033\013\0047\033\033\034\001\033\004\0346\004\003\034\001\004\022\034\001\004\007\034\n\004\002\034\002\033\n\034\001\033\007\004\001\033\007\004\001\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\001\004\003\033\004\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\001\004\b\033\001\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\004\004\007\033\001\004\005\033\003\034\001\033\006\004\004\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\002\004\001\033\002\004\002\033\001\034\001\033\005\034\004\033\002\034\002\033\003\034\003\033\001\034\007\033\004\004\001\033\001\004\007\033\f\034\003\004\001\034\013\033\003\034\001\033\t\004\001\033\003\004\001\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\b\034\001\033\003\034\001\033\003\034\002\033\001\004\017\033\002\004\002\034\002\033\n\034\001\033\001\004\017\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\b\033\002\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\001\033\001\004\020\033\001\034\001\004\001\033\006\004\003\033\003\004\001\033\004\004\003\033\002\004\001\033\001\004\001\033\002\004\003\033\002\004\003\033\003\004\003\033\f\004\004\033\005\034\003\033\003\034\001\033\004\034\002\033\001\004\006\033\001\034\016\033\n\034\t\033\001\004\007\033\003\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\003\033\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\001\033\002\004\006\033\002\004\002\034\002\033\n\034\022\033\002\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\002\033\001\034\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\007\033\001\004\001\033\002\004\002\034\002\033\n\034\001\033\002\004\017\033\002\034\001\033\b\004\001\033\003\004\001\033)\004\002\033\001\004\007\034\001\033\003\034\001\033\004\034\001\004\b\033\001\034\b\033\002\004\002\034\002\033\n\034\n\033\006\004\002\033\002\034\001\033\022\004\003\033\030\004\001\033\t\004\001\033\001\004\002\033\007\004\003\033\001\034\004\033\006\034\001\033\001\034\001\033\b\034\022\033\002\034\r\0330\004\001\034\002\004\007\034\004\033\b\004\b\034\001\033\n\034'\033\002\004\001\033\001\004\002\033\002\004\001\033\001\004\002\033\001\004\006\033\004\004\001\033\007\004\001\033\003\004\001\033\001\004\001\033\001\004\002\033\002\004\001\033\004\004\001\034\002\004\006\034\001\033\002\034\001\004\002\033\005\004\001\033\001\004\001\033\006\034\002\033\n\034\002\033\004\004 \033\001\004\027\033\002\034\006\033\n\034\013\033\001\034\001\033\001\034\001\033\001\034\004\033\002\034\b\004\001\033$\004\004\033\024\034\001\033\002\034\005\004\013\034\001\033$\034\t\033\001\0349\033+\004\024\034\001\004\n\034\006\033\006\004\004\034\004\004\003\034\001\004\003\034\002\004\007\034\003\004\004\034\r\004\f\034\001\004\017\034\002\033&\004\001\033\001\004\005\033\001\004\002\033+\004\001\033ō\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033)\004\001\033\004\004\002\033!\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033\017\004\001\0339\004\001\033\004\004\002\033C\004\002\033\003\034 \033\020\004\020\033U\004\f\033ɬ\004\002\033\021\004\001\000\032\004\005\033K\004\003\033\003\004\017\033\r\004\001\033\004\004\003\034\013\033\022\004\003\034\013\033\022\004\002\034\f\033\r\004\001\033\003\004\001\033\002\034\f\0334\004 \034\003\033\001\004\003\033\002\004\001\034\002\033\n\034!\033\003\034\002\033\n\034\006\033X\004\b\033)\004\001\034\001\004\005\033F\004\n\033\035\004\003\033\f\034\004\033\f\034\n\033\n\034\036\004\002\033\005\004\013\033,\004\004\033\021\034\007\004\002\034\006\033\n\034&\033\027\004\005\034\004\0335\004\n\034\001\033\035\034\002\033\013\034\006\033\n\034\r\033\001\004X\033\005\034/\004\021\034\007\004\004\033\n\034\021\033\t\034\f\033\003\034\036\004\r\034\002\004\n\034,\004\016\034\f\033$\004\024\034\b\033\n\034\003\033\003\004\n\034$\004R\033\003\034\001\033\025\034\004\004\001\034\004\004\003\034\002\004\t\033À\004'\034\025\033\004\034Ė\004\002\033\006\004\002\033&\004\002\033\006\004\002\033\b\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\037\004\002\0335\004\001\033\007\004\001\033\001\004\003\033\003\004\001\033\007\004\003\033\004\004\002\033\006\004\004\033\r\004\005\033\003\004\001\033\007\004\003\033\013\000\005\034\030\033\002\000\005\034\001\000\017\033\002\004\023\033\001\004\n\033\001\000\005\034\005\033\006\034\001\033\001\004\r\033\001\004\020\033\r\004\003\033\033\004\025\033\r\034\004\033\001\034\003\033\f\034\021\033\001\004\004\033\001\004\002\033\n\004\001\033\001\004\003\033\005\004\006\033\001\004\001\033\001\004\001\033\001\004\001\033\004\004\001\033\013\004\002\033\004\004\005\033\005\004\004\033\001\004\021\033)\004੷\033/\004\001\033/\004\001\033\004\006\033\004\004\003\034\002\004\f\033&\004\001\033\001\004\005\033\001\004\002\0338\004\007\033\001\004\017\033\001\034\027\004\t\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033 \034/\033\001\004ǐ\033\001\000\004\033\003\004\031\033\t\004\006\034\001\033\005\004\002\033\005\004\004\033V\004\002\033\002\034\002\033\003\004\001\033Z\004\001\033\004\004\005\033)\004\003\033^\004\021\033\033\0045\033\020\004Ȁ\033ᦶ\004J\033凍\0043\033ҍ\004C\033.\004\002\033č\004\003\033\020\004\n\034\002\004\024\033/\004\001\034\004\033\n\034\001\033\031\004\007\033\001\034P\004\002\034%\033\t\004\002\033g\004\002\033\004\004\001\033\004\004\f\033\013\004M\033\n\004\001\034\003\004\001\034\004\004\001\034\027\004\005\034\020\033\001\004\007\0334\004\f\033\002\0342\004\021\034\013\033\n\034\006\033\022\034\006\004\003\033\001\004\004\033\n\034\034\004\b\034\002\033\027\004\r\034\f\033\035\004\003\033\004\034/\004\016\034\016\033\001\004\n\034&\033)\004\016\034\t\033\003\004\001\034\b\004\002\034\002\033\n\034\006\033\027\004\003\033\001\004\001\034\004\0330\004\001\034\001\004\003\034\002\004\002\034\005\004\002\034\001\004\001\034\001\004\030\033\003\004\002\033\013\004\005\034\002\033\003\004\002\034\n\033\006\004\002\033\006\004\002\033\006\004\t\033\007\004\001\033\007\004\033#\004\b\034\001\033\002\034\002\033\n\034\006\033⮤\004\f\033\027\004\004\0331\004℄\033Ů\004\002\033j\004&\033\007\004\f\033\005\004\005\033\001\004\001\034\n\004\001\033\r\004\001\033\005\004\001\033\001\004\001\033\002\004\001\033\002\004\001\033l\004!\033ū\004\022\033@\004\002\0336\004(\033\r\004\003\033\020\034\020\033\007\034\f\033\002\004\030\033\003\004\031\033\001\004\006\033\005\004\001\033\004\002\033\001\034\004\033\001\004\013\033\n\034\007\033\032\004\004\033\001\004\001\033\032\004\013\033Y\004\003\033\006\004\002\033\006\004\002\033\006\004\002\033\003\004\003\033\002\004\003\033\002\004\022\033\003\034\004\033\f\004\001\033\032\004\001\033\023\004\001\033\002\004\001\033\017\004\002\033\016\004\"\033{\004E\0335\004\033\001\034\033\035\004\003\0331\004/\033\037\004\021\033\033\0045\033\036\004\002\033$\004\004\033\b\004\001\033\005\004*\033\004\002\033\n\034͖\033\006\004\002\033\001\004\001\033,\004\001\033\002\004\003\033\001\004\002\033\027\004ª\033\026\004\n\033\032\004F\0338\004\006\033\002\004@\033\001\004\003\034\001\033\002\034\005\033\004\034\004\004\001\033\003\004\001\033\033\004\004\033\003\034\004\033\001\034 \033\035\004\0336\004\n\033\026\004\n\033\023\004\033I\004η\033\003\0345\004\017\034\037\033\n\034\020\033\003\034-\004\013\034\002\033\001\034\022\033\031\004\007\033\n\034\006\033\003\034$\004\016\034\001\033\n\034@\033\003\0340\004\016\034\004\004\013\033\n\034Ҧ\033+\004\r\034\b\033\n\034श\033ͯ\004\033c\004஝\033Я\004㏑\033ȹ\004Ӈ\033E\004\013\033\001\004.\034\020\033\004\034\r\004䁠\033\002\004Ⅳ\033\005\034\003\033\026\034\002\033\007\034\036\033\004\034\033\003\034ƻ\033U\004\001\033G\004\001\033\002\004\002\033\001\004\002\033\002\004\002\033\004\004\001\033\f\004\001\033\001\004\001\033\007\004\001\033A\004\001\033\004\004\002\033\b\004\001\033\007\004\001\033\034\004\001\033\004\004\001\033\005\004\001\033\001\004\003\033\007\004\001\033Ŕ\004\002\033\031\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\b\004\002\0332\034ᘀ\033\004\004\001\033\033\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\n\004\001\033\004\004\001\033\001\004\001\033\001\004\006\033\001\004\004\033\001\004\001\033\001\004\001\033\001\004\001\033\003\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\002\004\001\033\001\004\002\033\004\004\001\033\007\004\001\033\004\004\001\033\004\004\001\033\001\004\001\033\n\004\001\033\021\004\005\033\003\004\001\033\005\004\001\033\021\004ᅄ\033ꛗ\004)\033ဵ\004\013\033Þ\004㿢\033Ȟ\004￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033׮\033\001\034\036\033`\034\033ð\034￿\033￿\033︒\033");
  
  private static final int[] c = a();
  
  private static final int[] d = b();
  
  private static final int[] e = c();
  
  private static final String[] f = { "Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
  
  private static final int[] g = d();
  
  public static final int xBLOCK_COMMENT = 12;
  
  public static final int xBLOCK_STRING = 8;
  
  public static final int xCOMMENT = 10;
  
  public static final int xDOUBLE_QUOTED_STRING = 4;
  
  public static final int xSHEBANG = 2;
  
  public static final int xSINGLE_QUOTED_STRING = 6;
  
  private Reader h;
  
  private int i;
  
  private int j = 0;
  
  private char[] k = new char[16384];
  
  private int l;
  
  private int m;
  
  private int n;
  
  private int o;
  
  private int p;
  
  private int q;
  
  private int r;
  
  private boolean s = true;
  
  private boolean t;
  
  private boolean u;
  
  private int v = 0;
  
  private int w = 0;
  
  public LuaLexer(Reader paramReader) { this.h = paramReader; }
  
  public LuaLexer(CharSequence paramCharSequence) { this(new CharSeqReader(paramCharSequence)); }
  
  private static int a(String paramString, int paramInt, int[] paramArrayOfInt) {
    int i1 = paramString.length();
    char c1 = Character.MIN_VALUE;
    label13: while (c1 < i1) {
      byte b1 = c1 + true;
      c1 = paramString.charAt(c1);
      char c2 = paramString.charAt(b1);
      int i2;
      for (i2 = paramInt;; i2 = paramInt) {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = c2;
        if (--c1 <= '\000') {
          c1 = b1 + 1;
          continue label13;
        } 
      } 
    } 
    return paramInt;
  }
  
  private void a(int paramInt) {
    String str;
    try {
      str = f[paramInt];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      str = f[0];
    } 
    throw new Error(str);
  }
  
  private boolean a(char paramChar, int paramInt) {
    int i1 = this.l;
    int i2 = this.k.length;
    boolean bool = false;
    if (i1 + paramInt >= i2)
      return false; 
    if (this.k[this.l + paramInt] == paramChar)
      bool = true; 
    return bool;
  }
  
  private static char[] a(String paramString) {
    char[] arrayOfChar = new char[1114112];
    char c1 = Character.MIN_VALUE;
    byte b1 = 0;
    label13: while (c1 < 'ୄ') {
      byte b3 = c1 + true;
      c1 = paramString.charAt(c1);
      char c2 = paramString.charAt(b3);
      byte b2;
      for (b2 = b1;; b2 = b1) {
        b1 = b2 + true;
        arrayOfChar[b2] = c2;
        if (--c1 <= '\000') {
          c1 = b3 + 1;
          continue label13;
        } 
      } 
    } 
    return arrayOfChar;
  }
  
  private static int[] a() {
    int[] arrayOfInt = new int[224];
    a("\001\000\001\001\005\000\001\002\002\003\001\004\001\005\001\006\001\007\001\006\001\b\001\t\007\005\001\n\001\013\001\f\001\r\001\002\001\016\t\005\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\"\001\002\001\000\002#\002\006\001\000\001\006\001$\001%\004\005\001&\001'\001(\003\005\001)\001*\001\000\001+\002\000\016\005\001,\001-\001.\001/\0010\0011\0012\0013\0014\001(\001\"\004\000\0015\002\000\002\006\0016\002\000\002\005\0017\002\005\0018\001\020\001\005\0019\001:\0014\004\005\001;\t\005\001\000\0015\001<\001\000\001\006\004\000\002\005\001=\001>\n\005\001?\001@\001A\001B\001\005\001C\002\000\001D\001\006\002\000\003\005\001E\001\005\001F\001G\002\005\001H\001\005\001I\001\005\001J\001\000\001\006\002\000\001K\001L\001M\001\005\001N\001O\002\005\003\000\001P\002\005\001Q\001\000\001R\001S\001Q\002\000\002T", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int b(String paramString, int paramInt, int[] paramArrayOfInt) {
    int i3 = paramString.length();
    int i2 = 0;
    int i1 = paramInt;
    for (paramInt = i2; paramInt < i3; paramInt = i2 + 1) {
      i2 = paramInt + 1;
      paramArrayOfInt[i1] = paramString.charAt(paramInt) << '\020' | paramString.charAt(i2);
      i1++;
    } 
    return i1;
  }
  
  private static int[] b() {
    int[] arrayOfInt = new int[224];
    b("\000\000\000>\000|\000º\000ø\000Ķ\000Ŵ\000Ʋ\000ǰ\000Ʋ\000Ȯ\000ɬ\000ʪ\000Ʋ\000˨\000̦\000ͤ\000΢\000Ϡ\000О\000ќ\000Қ\000Ә\000Ԗ\000Ք\000֒\000Ʋ\000Ʋ\000א\000Ʋ\000؎\000ٌ\000ڊ\000ۈ\000܆\000݄\000ނ\000߀\000߾\000࠼\000ࡺ\000ࢸ\000ࣶ\000ࡺ\000Ʋ\000Ʋ\000ऴ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000ॲ\000Ʋ\000র\000৮\000Ʋ\000ਬ\000੪\000ન\000૦\000Ʋ\000ତ\000ୢ\000஠\000௞\000జ\000ౚ\000ಘ\000ೖ\000ഔ\000൒\000ඐ\000ɬ\000ɬ\000ɬ\000෎\000ฌ\000๊\000ɬ\000Ʋ\000Ք\000Ʋ\000ຈ\000ໆ\000༄\000ག\000ྀ\000྾\000࿼\000်\000ၸ\000Ⴖ\000ჴ\000ᄲ\000ᅰ\000ᆮ\000ᇬ\000ሪ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000Ʋ\000ቨ\000ኦ\000ዤ\000ન\000ጢ\000፠\000జ\000᎞\000Ꮬ\000Ʋ\000ᐚ\000ᑘ\000ᒖ\000ᓔ\000ɬ\000ᔒ\000ᕐ\000ɬ\000ɬ\000ᖎ\000Ʋ\000Ʋ\000ɬ\000ᗌ\000ᘊ\000ᙈ\000ᚆ\000ɬ\000ᛄ\000ᜂ\000ᝀ\000᝾\000ូ\000៺\000ᠸ\000ᡶ\000ᢴ\000ᣲ\000ᤰ\000᥮\000᦬\000᧪\000ୢ\000ᨨ\000ᩦ\000᪤\000᫢\000ᬠ\000᭞\000ɬ\000ᮜ\000ᯚ\000ᰘ\000᱖\000Ე\000᳒\000ᴐ\000ᵎ\000ᶌ\000᷊\000ɬ\000ɬ\000ɬ\000ɬ\000Ḉ\000ᣲ\000Ṇ\000Ẅ\000Ể\000ἀ\000Ἶ\000ὼ\000Ὰ\000Ὸ\000‶\000ɬ\000⁴\000ɬ\000ɬ\000₲\000⃰\000ɬ\000℮\000ɬ\000Ⅼ\000ɬ\000↪\000⇨\000∦\000≤\000ɬ\000ɬ\000ɬ\000⊢\000ɬ\000ɬ\000⋠\000⌞\000⍜\000⎚\000⏘\000ɬ\000␖\000⑔\000⒒\000ⓐ\000ɬ\000ɬ\000┎\000╌\000▊\000◈\000☆", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int c(String paramString, int paramInt, int[] paramArrayOfInt) {
    int i1 = paramString.length();
    char c1 = Character.MIN_VALUE;
    label13: while (c1 < i1) {
      byte b1 = c1 + true;
      c1 = paramString.charAt(c1);
      char c2 = paramString.charAt(b1);
      int i2;
      for (i2 = paramInt;; i2 = paramInt) {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = c2 - '\001';
        if (--c1 <= '\000') {
          c1 = b1 + 1;
          continue label13;
        } 
      } 
    } 
    return paramInt;
  }
  
  private static int[] c() {
    int[] arrayOfInt = new int[9796];
    c("\001\b\001\t\001\n\001\013\001\f\001\b\001\r\002\f\001\016\001\f\001\017\001\f\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\002\b\001\036\001\037\001 \001\f\001!\001\"\001#\001$\001%\001&\002\f\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001\f\001:\001\002\002\000;\002\031\000\001;A\000\001< \000\026\b\001='\b\016\000\001>/\000\016?\001@/?@\000\001\n>\000\001\013>\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\f\f\022\000\001\f\007\000\001\r\001\000\001A\002\000\001\r\001\000\001B\002\000\001A3\000\001\r\001\000\001A\002\000\001\r\001C\001B\002\000\001A3\000\001D\004\000\001D\001\000\001E>\000\001F3\000\005\f\001\000\003\f\002\000\001\f\001G\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001H\001\f\006\000\001\f\001\000\003\f\001I\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001J\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001K\001\f\006\000\001\f\001\000\005\f\001L\006\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001M\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001N\001O\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001P\002\f\001Q\002\f\006\000\001\f\001\000\f\f\022\000\001\f\027\000\001R\001S=\000\001T4\000\001U\b\000\001V*\000\005\f\001\000\003\f\002\000\005\f\001W\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001X\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001Y\002\f\006\000\001\f\001\000\001Z\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\013\f\001[\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001\\\002\f\006\000\001\f\001\000\001]\005\f\001^\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001_\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001`\002\f\006\000\001\f\001\000\001a\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001b\006\f\006\000\001\f\001\000\n\f\001c\001\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001d\001\f\022\000\001\f,\000\001e)\000\001f=\000\001g\024\000\001h(\000\001i\025\000\001jA\000\001kD\000\001l?\000\001m>\000\001n\002\000\031;\001o\001p#;\032<\001q\002<\001o <\026\000\001r\001s4\000\001t=\000\001u5\000\001D\002\000\001v\001\000\001D\002\000\001v5\000\001w\004\000\001w8\000\003x\002\000\001x\004\000\001x\004\000\001x\b\000\002x\003\000\001x\001\000\001x\036\000\001D\004\000\001D?\000\001y?\000\001z\001{1\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001|\001}\002\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\006\f\001~\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001\006\f\022\000\001\f-\000\001=\000\001\025\000\005\f\001\000\003\f\002\000\006\f\001\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\f\f\022\000\001\005\000\005\f\001\000\003\f\002\000\003\f\001\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\001\f\001\003\f\006\000\001\f\001\000\f\f\022\000\001\f\002\000\002;\001\000\001;\001\0008;\001\000\002<\001\000\001<\001\0008<\030r\001%r\001\002\000\013\001/\026\000\001-\000\001w\001\000\001A\002\000\001w\004\000\001A3\000\002x\001\001\000\001\001x\001\000\001\002\000\001\004\000\001x\b\000\002x\003\000\001x\001\000\001x\001\000\001&\000\001A\000\001-\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001 \005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001¡\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001¢\005\f\006\000\001\f\001\000\001£\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¤\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¥\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001\f\001¦\n\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001§\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001¨\007\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001©\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001ª\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001«\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001¬\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001­\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001®\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001¯\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001°\b\f\022\000\001\f\001\000\027r\001\001±%r\001\002\000;\001\001²\001³;\026\000\001´\001,\000\002x\001\001v\001\001x\001\000\001\001v\001\000\001\004\000\001x\b\000\002x\003\000\001x\001\000\001x\001\000\001\034\000\003µ\002\000\001µ\004\000\001µ\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ)\000\001¶A\000\001·,\000\005\f\001\000\003\f\002\000\001¸\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¹\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001º\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001»\006\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001¼\005\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\002\f\001½\t\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001¾\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\006\f\001¿\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001À\004\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Á\005\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Â\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001Ã\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001Ä\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Å\005\f\006\000\001\f\001\000\f\f\022\000\001\f\003\000\001³>\000\001³\n\000\001Æ/\000>´\006\000\002µ\001Ç\001\000\001\001µ\004\000\001Ç\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ\001\000\001(\000\001È:\000\001É2\000\005\f\001\000\003\f\002\000\005\f\001Ê\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Ë\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001Ì\006\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001Í\b\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001Î\013\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001Ï\001\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\003\f\001Ð\003\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\005\f\001Ñ\001\f\006\000\001\f\001\000\f\f\022\000\001\f\017\000\001Ò5\000\002µ\001Ç\001v\001\001µ\002\000\001v\001\000\001Ç\004\000\001µ\b\000\002µ\003\000\001µ\001\000\001µ\001\000\001)\000\001Ó:\000\001Ô1\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Õ\003\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\004\f\001Ö\002\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001×\005\f\022\000\001\f\017\000\001C\000\001Ø:\000\001Ù0\000\005\f\001\000\003\f\002\000\005\f\001Ú\001\f\006\000\001\f\001\000\f\f\022\000\001\f\005\000\005\f\001\000\003\f\002\000\001\f\001Û\005\f\006\000\001\f\001\000\f\f\022\000\001\f\004\000\001ÜL\000\001Ý+\000\001Ü\002\000;Ü\023\000\001Þ>\000\001ß,\000\001à:\000\001à\002\000;à", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int d(String paramString, int paramInt, int[] paramArrayOfInt) {
    int i1 = paramString.length();
    char c1 = Character.MIN_VALUE;
    label13: while (c1 < i1) {
      byte b1 = c1 + true;
      c1 = paramString.charAt(c1);
      char c2 = paramString.charAt(b1);
      int i2;
      for (i2 = paramInt;; i2 = paramInt) {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = c2;
        if (--c1 <= '\000') {
          c1 = b1 + 1;
          continue label13;
        } 
      } 
    } 
    return paramInt;
  }
  
  private static int[] d() {
    int[] arrayOfInt = new int[224];
    d("\001\000\001\001\005\000\001\t\001\001\001\t\003\001\001\t\f\001\002\t\001\001\001\t\016\001\002\t\001\001\006\t\001\001\001\t\002\001\001\t\003\001\001\000\001\t\003\001\001\000\016\001\001\t\001\000\001\t\002\000\016\001\013\t\004\000\001\001\002\000\002\001\001\t\002\000\b\001\002\t\017\001\001\000\002\001\001\000\001\001\004\000\024\001\002\000\002\001\002\000\016\001\001\000\001\001\002\000\b\001\003\000\004\001\001\000\003\001\002\000\002\001", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private boolean e() {
    byte b1 = 0;
    this.w = 0;
    int i1 = b1;
    if (a('[', 0)) {
      byte b3;
      byte b2 = 0;
      while (true) {
        b3 = b2 + true;
        if (a('=', b3)) {
          b2 = b3;
          continue;
        } 
        break;
      } 
      i1 = b1;
      if (a('[', b3)) {
        this.w = b2;
        i1 = 1;
      } 
    } 
    return i1;
  }
  
  private int f() {
    String str = yytext().toString();
    StringBuilder stringBuilder = new StringBuilder("]");
    int i1;
    for (i1 = 0; i1 < this.w; i1++)
      stringBuilder.append('='); 
    stringBuilder.append(']');
    i1 = str.indexOf(stringBuilder.toString());
    return (i1 > 0) ? (yylength() - i1 - this.w - 2) : -1;
  }
  
  private boolean g() {
    if (this.n > 0) {
      this.o += this.v;
      this.v = 0;
      System.arraycopy(this.k, this.n, this.k, 0, this.o - this.n);
      this.o -= this.n;
      this.m -= this.n;
      this.l -= this.n;
      this.n = 0;
    } 
    if (this.m >= this.k.length - this.v) {
      char[] arrayOfChar = new char[this.k.length * 2];
      System.arraycopy(this.k, 0, arrayOfChar, 0, this.k.length);
      this.k = arrayOfChar;
      this.o += this.v;
      this.v = 0;
    } 
    int i1 = this.k.length - this.o;
    int i2 = this.h.read(this.k, this.o, i1);
    if (i2 == 0)
      throw new IOException("Reader returned 0 characters. See JFlex examples for workaround."); 
    if (i2 > 0) {
      this.o += i2;
      if (i2 == i1 && Character.isHighSurrogate(this.k[this.o - 1])) {
        this.o--;
        this.v = 1;
      } 
      return false;
    } 
    return true;
  }
  
  public LuaTokenTypes advance() { // Byte code:
    //   0: aload_0
    //   1: getfield o : I
    //   4: istore_1
    //   5: aload_0
    //   6: getfield k : [C
    //   9: astore #8
    //   11: getstatic com/androlua/LuaLexer.b : [C
    //   14: astore #10
    //   16: getstatic com/androlua/LuaLexer.e : [I
    //   19: astore #11
    //   21: getstatic com/androlua/LuaLexer.d : [I
    //   24: astore #12
    //   26: getstatic com/androlua/LuaLexer.g : [I
    //   29: astore #13
    //   31: aload_0
    //   32: getfield l : I
    //   35: istore #4
    //   37: aload_0
    //   38: aload_0
    //   39: getfield q : I
    //   42: iload #4
    //   44: aload_0
    //   45: getfield n : I
    //   48: isub
    //   49: iadd
    //   50: putfield q : I
    //   53: aload_0
    //   54: getfield n : I
    //   57: istore_3
    //   58: iconst_0
    //   59: istore #5
    //   61: iload_3
    //   62: iload #4
    //   64: if_icmpge -> 238
    //   67: aload #8
    //   69: iload_3
    //   70: iload #4
    //   72: invokestatic codePointAt : ([CII)I
    //   75: istore_2
    //   76: iload_2
    //   77: invokestatic charCount : (I)I
    //   80: istore #6
    //   82: iload_2
    //   83: sipush #133
    //   86: if_icmpeq -> 209
    //   89: iload_2
    //   90: tableswitch default -> 120, 10 -> 180, 11 -> 209, 12 -> 209, 13 -> 160
    //   120: iload_2
    //   121: tableswitch default -> 144, 8232 -> 209, 8233 -> 209
    //   144: aload_0
    //   145: aload_0
    //   146: getfield r : I
    //   149: iload #6
    //   151: iadd
    //   152: putfield r : I
    //   155: iconst_0
    //   156: istore_2
    //   157: goto -> 227
    //   160: aload_0
    //   161: aload_0
    //   162: getfield p : I
    //   165: iconst_1
    //   166: iadd
    //   167: putfield p : I
    //   170: aload_0
    //   171: iconst_0
    //   172: putfield r : I
    //   175: iconst_1
    //   176: istore_2
    //   177: goto -> 227
    //   180: iload #5
    //   182: ifeq -> 188
    //   185: goto -> 155
    //   188: aload_0
    //   189: aload_0
    //   190: getfield p : I
    //   193: iconst_1
    //   194: iadd
    //   195: putfield p : I
    //   198: aload_0
    //   199: iconst_0
    //   200: putfield r : I
    //   203: iload #5
    //   205: istore_2
    //   206: goto -> 227
    //   209: aload_0
    //   210: aload_0
    //   211: getfield p : I
    //   214: iconst_1
    //   215: iadd
    //   216: putfield p : I
    //   219: aload_0
    //   220: iconst_0
    //   221: putfield r : I
    //   224: goto -> 155
    //   227: iload_3
    //   228: iload #6
    //   230: iadd
    //   231: istore_3
    //   232: iload_2
    //   233: istore #5
    //   235: goto -> 61
    //   238: iload_1
    //   239: istore_3
    //   240: aload #8
    //   242: astore #9
    //   244: iload #4
    //   246: istore_2
    //   247: iload #5
    //   249: ifeq -> 392
    //   252: iload #4
    //   254: iload_1
    //   255: if_icmpge -> 283
    //   258: aload #8
    //   260: iload #4
    //   262: caload
    //   263: bipush #10
    //   265: if_icmpne -> 273
    //   268: iconst_1
    //   269: istore_2
    //   270: goto -> 275
    //   273: iconst_0
    //   274: istore_2
    //   275: iload_2
    //   276: istore_3
    //   277: iload #4
    //   279: istore_2
    //   280: goto -> 372
    //   283: aload_0
    //   284: getfield t : Z
    //   287: ifeq -> 298
    //   290: iload #4
    //   292: istore_2
    //   293: iconst_0
    //   294: istore_3
    //   295: goto -> 372
    //   298: aload_0
    //   299: invokespecial g : ()Z
    //   302: istore #7
    //   304: aload_0
    //   305: getfield o : I
    //   308: istore_3
    //   309: aload_0
    //   310: getfield l : I
    //   313: istore #4
    //   315: aload_0
    //   316: getfield k : [C
    //   319: astore #9
    //   321: iload #7
    //   323: ifeq -> 338
    //   326: iload_3
    //   327: istore_1
    //   328: iload #4
    //   330: istore_2
    //   331: aload #9
    //   333: astore #8
    //   335: goto -> 293
    //   338: iload_3
    //   339: istore_1
    //   340: iload #4
    //   342: istore_2
    //   343: aload #9
    //   345: astore #8
    //   347: aload #9
    //   349: iload #4
    //   351: caload
    //   352: bipush #10
    //   354: if_icmpne -> 293
    //   357: iconst_1
    //   358: istore #5
    //   360: aload #9
    //   362: astore #8
    //   364: iload #4
    //   366: istore_2
    //   367: iload_3
    //   368: istore_1
    //   369: iload #5
    //   371: istore_3
    //   372: iload_3
    //   373: ifeq -> 386
    //   376: aload_0
    //   377: aload_0
    //   378: getfield p : I
    //   381: iconst_1
    //   382: isub
    //   383: putfield p : I
    //   386: aload #8
    //   388: astore #9
    //   390: iload_1
    //   391: istore_3
    //   392: aload_0
    //   393: iload_2
    //   394: putfield n : I
    //   397: aload_0
    //   398: iload_2
    //   399: putfield m : I
    //   402: aload_0
    //   403: getstatic com/androlua/LuaLexer.a : [I
    //   406: aload_0
    //   407: getfield j : I
    //   410: iaload
    //   411: putfield i : I
    //   414: aload #13
    //   416: aload_0
    //   417: getfield i : I
    //   420: iaload
    //   421: iconst_1
    //   422: iand
    //   423: iconst_1
    //   424: if_icmpne -> 443
    //   427: aload_0
    //   428: getfield i : I
    //   431: istore #5
    //   433: iload_2
    //   434: istore_1
    //   435: iload_3
    //   436: istore_2
    //   437: iload_1
    //   438: istore #4
    //   440: goto -> 453
    //   443: iload_2
    //   444: istore #4
    //   446: iconst_m1
    //   447: istore #5
    //   449: iload_2
    //   450: istore_1
    //   451: iload_3
    //   452: istore_2
    //   453: iload_1
    //   454: iload_2
    //   455: if_icmpge -> 476
    //   458: aload #9
    //   460: iload_1
    //   461: iload_2
    //   462: invokestatic codePointAt : ([CII)I
    //   465: istore_3
    //   466: iload_1
    //   467: iload_3
    //   468: invokestatic charCount : (I)I
    //   471: iadd
    //   472: istore_1
    //   473: goto -> 562
    //   476: aload_0
    //   477: getfield t : Z
    //   480: ifeq -> 488
    //   483: iconst_m1
    //   484: istore_3
    //   485: goto -> 630
    //   488: aload_0
    //   489: iload_1
    //   490: putfield m : I
    //   493: aload_0
    //   494: iload #4
    //   496: putfield l : I
    //   499: aload_0
    //   500: invokespecial g : ()Z
    //   503: istore #7
    //   505: aload_0
    //   506: getfield m : I
    //   509: istore_1
    //   510: aload_0
    //   511: getfield l : I
    //   514: istore #4
    //   516: aload_0
    //   517: getfield k : [C
    //   520: astore #8
    //   522: aload_0
    //   523: getfield o : I
    //   526: istore_2
    //   527: iload #7
    //   529: ifeq -> 539
    //   532: aload #8
    //   534: astore #9
    //   536: goto -> 483
    //   539: aload #8
    //   541: iload_1
    //   542: iload_2
    //   543: invokestatic codePointAt : ([CII)I
    //   546: istore_3
    //   547: iload_3
    //   548: invokestatic charCount : (I)I
    //   551: istore #6
    //   553: iload_1
    //   554: iload #6
    //   556: iadd
    //   557: istore_1
    //   558: aload #8
    //   560: astore #9
    //   562: aload #11
    //   564: aload #12
    //   566: aload_0
    //   567: getfield i : I
    //   570: iaload
    //   571: aload #10
    //   573: iload_3
    //   574: caload
    //   575: iadd
    //   576: iaload
    //   577: istore #6
    //   579: iload #6
    //   581: iconst_m1
    //   582: if_icmpne -> 588
    //   585: goto -> 630
    //   588: aload_0
    //   589: iload #6
    //   591: putfield i : I
    //   594: aload #13
    //   596: aload_0
    //   597: getfield i : I
    //   600: iaload
    //   601: istore #6
    //   603: iload #6
    //   605: iconst_1
    //   606: iand
    //   607: iconst_1
    //   608: if_icmpne -> 1906
    //   611: aload_0
    //   612: getfield i : I
    //   615: istore #5
    //   617: iload #6
    //   619: bipush #8
    //   621: iand
    //   622: bipush #8
    //   624: if_icmpne -> 1903
    //   627: iload_1
    //   628: istore #4
    //   630: aload_0
    //   631: iload #4
    //   633: putfield l : I
    //   636: iload_3
    //   637: iconst_m1
    //   638: if_icmpne -> 659
    //   641: aload_0
    //   642: getfield n : I
    //   645: aload_0
    //   646: getfield m : I
    //   649: if_icmpne -> 659
    //   652: aload_0
    //   653: iconst_1
    //   654: putfield t : Z
    //   657: aconst_null
    //   658: areturn
    //   659: iload #5
    //   661: ifge -> 667
    //   664: goto -> 675
    //   667: getstatic com/androlua/LuaLexer.c : [I
    //   670: iload #5
    //   672: iaload
    //   673: istore #5
    //   675: iload_2
    //   676: istore_1
    //   677: aload #9
    //   679: astore #8
    //   681: iload #5
    //   683: tableswitch default -> 1368, 1 -> 1894, 2 -> 1890, 3 -> 1886, 4 -> 1882, 5 -> 1878, 6 -> 1874, 7 -> 1870, 8 -> 1866, 9 -> 1862, 10 -> 1858, 11 -> 1854, 12 -> 1850, 13 -> 1845, 14 -> 1820, 15 -> 1816, 16 -> 1812, 17 -> 1808, 18 -> 1804, 19 -> 1800, 20 -> 1796, 21 -> 1792, 22 -> 1788, 23 -> 1784, 24 -> 1780, 25 -> 1776, 26 -> 1772, 27 -> 1768, 28 -> 1764, 29 -> 1760, 30 -> 1756, 31 -> 1752, 32 -> 1748, 33 -> 1744, 34 -> 1735, 35 -> 1724, 36 -> 1720, 37 -> 1667, 38 -> 1663, 39 -> 1659, 40 -> 1655, 41 -> 1651, 42 -> 1623, 43 -> 1619, 44 -> 1610, 45 -> 1606, 46 -> 1602, 47 -> 1598, 48 -> 1594, 49 -> 1590, 50 -> 1586, 51 -> 1582, 52 -> 1578, 53 -> 1569, 54 -> 1565, 55 -> 1561, 56 -> 1557, 57 -> 1553, 58 -> 1549, 59 -> 1545, 60 -> 1536, 61 -> 1532, 62 -> 1528, 63 -> 1524, 64 -> 1520, 65 -> 1516, 66 -> 1512, 67 -> 1479, 68 -> 1446, 69 -> 1442, 70 -> 1438, 71 -> 1434, 72 -> 1430, 73 -> 1426, 74 -> 1422, 75 -> 1418, 76 -> 1414, 77 -> 1410, 78 -> 1406, 79 -> 1402, 80 -> 1398, 81 -> 1394, 82 -> 1390, 83 -> 1386, 84 -> 1382, 85 -> 31, 86 -> 31, 87 -> 31, 88 -> 31, 89 -> 31, 90 -> 31, 91 -> 31, 92 -> 31, 93 -> 31, 94 -> 31, 95 -> 31, 96 -> 31, 97 -> 31, 98 -> 31, 99 -> 31, 100 -> 31, 101 -> 31, 102 -> 31, 103 -> 31, 104 -> 31, 105 -> 31, 106 -> 31, 107 -> 31, 108 -> 31, 109 -> 31, 110 -> 31, 111 -> 31, 112 -> 31, 113 -> 31, 114 -> 31, 115 -> 31, 116 -> 31, 117 -> 31, 118 -> 31, 119 -> 31, 120 -> 31, 121 -> 31, 122 -> 31, 123 -> 31, 124 -> 31, 125 -> 31, 126 -> 31, 127 -> 31, 128 -> 31, 129 -> 31, 130 -> 31, 131 -> 31, 132 -> 31, 133 -> 31, 134 -> 31, 135 -> 31, 136 -> 31, 137 -> 31, 138 -> 31, 139 -> 31, 140 -> 31, 141 -> 31, 142 -> 31, 143 -> 31, 144 -> 31, 145 -> 31, 146 -> 31, 147 -> 31, 148 -> 31, 149 -> 31, 150 -> 31, 151 -> 31, 152 -> 31, 153 -> 31, 154 -> 31, 155 -> 31, 156 -> 31, 157 -> 31, 158 -> 31, 159 -> 31, 160 -> 31, 161 -> 31, 162 -> 31, 163 -> 31, 164 -> 31, 165 -> 31, 166 -> 31, 167 -> 31, 168 -> 31
    //   1368: aload_0
    //   1369: iconst_1
    //   1370: invokespecial a : (I)V
    //   1373: iload_2
    //   1374: istore_1
    //   1375: aload #9
    //   1377: astore #8
    //   1379: goto -> 31
    //   1382: getstatic com/androlua/LuaTokenTypes.ENDREGION : Lcom/androlua/LuaTokenTypes;
    //   1385: areturn
    //   1386: getstatic com/androlua/LuaTokenTypes.CONTINUE : Lcom/androlua/LuaTokenTypes;
    //   1389: areturn
    //   1390: getstatic com/androlua/LuaTokenTypes.FUNCTION : Lcom/androlua/LuaTokenTypes;
    //   1393: areturn
    //   1394: getstatic com/androlua/LuaTokenTypes.REGION : Lcom/androlua/LuaTokenTypes;
    //   1397: areturn
    //   1398: getstatic com/androlua/LuaTokenTypes.DEFAULT : Lcom/androlua/LuaTokenTypes;
    //   1401: areturn
    //   1402: getstatic com/androlua/LuaTokenTypes.SWITCH : Lcom/androlua/LuaTokenTypes;
    //   1405: areturn
    //   1406: getstatic com/androlua/LuaTokenTypes.LAMBDA : Lcom/androlua/LuaTokenTypes;
    //   1409: areturn
    //   1410: getstatic com/androlua/LuaTokenTypes.ELSEIF : Lcom/androlua/LuaTokenTypes;
    //   1413: areturn
    //   1414: getstatic com/androlua/LuaTokenTypes.REPEAT : Lcom/androlua/LuaTokenTypes;
    //   1417: areturn
    //   1418: getstatic com/androlua/LuaTokenTypes.RETURN : Lcom/androlua/LuaTokenTypes;
    //   1421: areturn
    //   1422: getstatic com/androlua/LuaTokenTypes.WHILE : Lcom/androlua/LuaTokenTypes;
    //   1425: areturn
    //   1426: getstatic com/androlua/LuaTokenTypes.UNTIL : Lcom/androlua/LuaTokenTypes;
    //   1429: areturn
    //   1430: getstatic com/androlua/LuaTokenTypes.FALSE : Lcom/androlua/LuaTokenTypes;
    //   1433: areturn
    //   1434: getstatic com/androlua/LuaTokenTypes.LOCAL : Lcom/androlua/LuaTokenTypes;
    //   1437: areturn
    //   1438: getstatic com/androlua/LuaTokenTypes.BREAK : Lcom/androlua/LuaTokenTypes;
    //   1441: areturn
    //   1442: getstatic com/androlua/LuaTokenTypes.DEFER : Lcom/androlua/LuaTokenTypes;
    //   1445: areturn
    //   1446: aload_0
    //   1447: invokespecial f : ()I
    //   1450: istore_1
    //   1451: iload_1
    //   1452: iconst_m1
    //   1453: if_icmpeq -> 1470
    //   1456: aload_0
    //   1457: iload_1
    //   1458: invokevirtual yypushback : (I)V
    //   1461: aload_0
    //   1462: iconst_0
    //   1463: invokevirtual yybegin : (I)V
    //   1466: getstatic com/androlua/LuaTokenTypes.BLOCK_COMMENT : Lcom/androlua/LuaTokenTypes;
    //   1469: areturn
    //   1470: aload_0
    //   1471: iconst_0
    //   1472: invokevirtual yybegin : (I)V
    //   1475: getstatic com/androlua/LuaTokenTypes.BLOCK_COMMENT : Lcom/androlua/LuaTokenTypes;
    //   1478: areturn
    //   1479: aload_0
    //   1480: invokespecial f : ()I
    //   1483: istore_1
    //   1484: iload_1
    //   1485: iconst_m1
    //   1486: if_icmpeq -> 1503
    //   1489: aload_0
    //   1490: iload_1
    //   1491: invokevirtual yypushback : (I)V
    //   1494: aload_0
    //   1495: iconst_0
    //   1496: invokevirtual yybegin : (I)V
    //   1499: getstatic com/androlua/LuaTokenTypes.LONG_STRING : Lcom/androlua/LuaTokenTypes;
    //   1502: areturn
    //   1503: aload_0
    //   1504: iconst_0
    //   1505: invokevirtual yybegin : (I)V
    //   1508: getstatic com/androlua/LuaTokenTypes.BAD_CHARACTER : Lcom/androlua/LuaTokenTypes;
    //   1511: areturn
    //   1512: getstatic com/androlua/LuaTokenTypes.WHEN : Lcom/androlua/LuaTokenTypes;
    //   1515: areturn
    //   1516: getstatic com/androlua/LuaTokenTypes.THEN : Lcom/androlua/LuaTokenTypes;
    //   1519: areturn
    //   1520: getstatic com/androlua/LuaTokenTypes.TRUE : Lcom/androlua/LuaTokenTypes;
    //   1523: areturn
    //   1524: getstatic com/androlua/LuaTokenTypes.CASE : Lcom/androlua/LuaTokenTypes;
    //   1527: areturn
    //   1528: getstatic com/androlua/LuaTokenTypes.GOTO : Lcom/androlua/LuaTokenTypes;
    //   1531: areturn
    //   1532: getstatic com/androlua/LuaTokenTypes.ELSE : Lcom/androlua/LuaTokenTypes;
    //   1535: areturn
    //   1536: aload_0
    //   1537: iconst_0
    //   1538: invokevirtual yybegin : (I)V
    //   1541: getstatic com/androlua/LuaTokenTypes.DOC_COMMENT : Lcom/androlua/LuaTokenTypes;
    //   1544: areturn
    //   1545: getstatic com/androlua/LuaTokenTypes.FOR : Lcom/androlua/LuaTokenTypes;
    //   1548: areturn
    //   1549: getstatic com/androlua/LuaTokenTypes.MEAN : Lcom/androlua/LuaTokenTypes;
    //   1552: areturn
    //   1553: getstatic com/androlua/LuaTokenTypes.LEF : Lcom/androlua/LuaTokenTypes;
    //   1556: areturn
    //   1557: getstatic com/androlua/LuaTokenTypes.NIL : Lcom/androlua/LuaTokenTypes;
    //   1560: areturn
    //   1561: getstatic com/androlua/LuaTokenTypes.END : Lcom/androlua/LuaTokenTypes;
    //   1564: areturn
    //   1565: getstatic com/androlua/LuaTokenTypes.ELLIPSIS : Lcom/androlua/LuaTokenTypes;
    //   1568: areturn
    //   1569: aload_0
    //   1570: iconst_0
    //   1571: invokevirtual yybegin : (I)V
    //   1574: getstatic com/androlua/LuaTokenTypes.SHORT_COMMENT : Lcom/androlua/LuaTokenTypes;
    //   1577: areturn
    //   1578: getstatic com/androlua/LuaTokenTypes.AND : Lcom/androlua/LuaTokenTypes;
    //   1581: areturn
    //   1582: getstatic com/androlua/LuaTokenTypes.DOUBLE_COLON : Lcom/androlua/LuaTokenTypes;
    //   1585: areturn
    //   1586: getstatic com/androlua/LuaTokenTypes.DOUBLE_DIV : Lcom/androlua/LuaTokenTypes;
    //   1589: areturn
    //   1590: getstatic com/androlua/LuaTokenTypes.BIT_LTLT : Lcom/androlua/LuaTokenTypes;
    //   1593: areturn
    //   1594: getstatic com/androlua/LuaTokenTypes.LE : Lcom/androlua/LuaTokenTypes;
    //   1597: areturn
    //   1598: getstatic com/androlua/LuaTokenTypes.BIT_RTRT : Lcom/androlua/LuaTokenTypes;
    //   1601: areturn
    //   1602: getstatic com/androlua/LuaTokenTypes.GE : Lcom/androlua/LuaTokenTypes;
    //   1605: areturn
    //   1606: getstatic com/androlua/LuaTokenTypes.NE : Lcom/androlua/LuaTokenTypes;
    //   1609: areturn
    //   1610: aload_0
    //   1611: iconst_2
    //   1612: invokevirtual yybegin : (I)V
    //   1615: getstatic com/androlua/LuaTokenTypes.SHEBANG : Lcom/androlua/LuaTokenTypes;
    //   1618: areturn
    //   1619: getstatic com/androlua/LuaTokenTypes.EQ : Lcom/androlua/LuaTokenTypes;
    //   1622: areturn
    //   1623: aload_0
    //   1624: bipush #8
    //   1626: invokevirtual yybegin : (I)V
    //   1629: aload_0
    //   1630: aload_0
    //   1631: invokevirtual yylength : ()I
    //   1634: invokevirtual yypushback : (I)V
    //   1637: aload_0
    //   1638: invokespecial e : ()Z
    //   1641: pop
    //   1642: iload_2
    //   1643: istore_1
    //   1644: aload #9
    //   1646: astore #8
    //   1648: goto -> 31
    //   1651: getstatic com/androlua/LuaTokenTypes.DO : Lcom/androlua/LuaTokenTypes;
    //   1654: areturn
    //   1655: getstatic com/androlua/LuaTokenTypes.OR : Lcom/androlua/LuaTokenTypes;
    //   1658: areturn
    //   1659: getstatic com/androlua/LuaTokenTypes.IF : Lcom/androlua/LuaTokenTypes;
    //   1662: areturn
    //   1663: getstatic com/androlua/LuaTokenTypes.IN : Lcom/androlua/LuaTokenTypes;
    //   1666: areturn
    //   1667: aload_0
    //   1668: invokespecial e : ()Z
    //   1671: ifeq -> 1697
    //   1674: aload_0
    //   1675: aload_0
    //   1676: invokevirtual yylength : ()I
    //   1679: invokevirtual yypushback : (I)V
    //   1682: aload_0
    //   1683: bipush #12
    //   1685: invokevirtual yybegin : (I)V
    //   1688: iload_2
    //   1689: istore_1
    //   1690: aload #9
    //   1692: astore #8
    //   1694: goto -> 31
    //   1697: aload_0
    //   1698: aload_0
    //   1699: invokevirtual yylength : ()I
    //   1702: invokevirtual yypushback : (I)V
    //   1705: aload_0
    //   1706: bipush #10
    //   1708: invokevirtual yybegin : (I)V
    //   1711: iload_2
    //   1712: istore_1
    //   1713: aload #9
    //   1715: astore #8
    //   1717: goto -> 31
    //   1720: getstatic com/androlua/LuaTokenTypes.CONCAT : Lcom/androlua/LuaTokenTypes;
    //   1723: areturn
    //   1724: aload_0
    //   1725: aload_0
    //   1726: invokevirtual yylength : ()I
    //   1729: invokevirtual yypushback : (I)V
    //   1732: goto -> 1705
    //   1735: aload_0
    //   1736: iconst_0
    //   1737: invokevirtual yybegin : (I)V
    //   1740: getstatic com/androlua/LuaTokenTypes.STRING : Lcom/androlua/LuaTokenTypes;
    //   1743: areturn
    //   1744: getstatic com/androlua/LuaTokenTypes.AT : Lcom/androlua/LuaTokenTypes;
    //   1747: areturn
    //   1748: getstatic com/androlua/LuaTokenTypes.BIT_OR : Lcom/androlua/LuaTokenTypes;
    //   1751: areturn
    //   1752: getstatic com/androlua/LuaTokenTypes.BIT_AND : Lcom/androlua/LuaTokenTypes;
    //   1755: areturn
    //   1756: getstatic com/androlua/LuaTokenTypes.EXP : Lcom/androlua/LuaTokenTypes;
    //   1759: areturn
    //   1760: getstatic com/androlua/LuaTokenTypes.COLON : Lcom/androlua/LuaTokenTypes;
    //   1763: areturn
    //   1764: getstatic com/androlua/LuaTokenTypes.SEMI : Lcom/androlua/LuaTokenTypes;
    //   1767: areturn
    //   1768: getstatic com/androlua/LuaTokenTypes.COMMA : Lcom/androlua/LuaTokenTypes;
    //   1771: areturn
    //   1772: getstatic com/androlua/LuaTokenTypes.RCURLY : Lcom/androlua/LuaTokenTypes;
    //   1775: areturn
    //   1776: getstatic com/androlua/LuaTokenTypes.LCURLY : Lcom/androlua/LuaTokenTypes;
    //   1779: areturn
    //   1780: getstatic com/androlua/LuaTokenTypes.RPAREN : Lcom/androlua/LuaTokenTypes;
    //   1783: areturn
    //   1784: getstatic com/androlua/LuaTokenTypes.LPAREN : Lcom/androlua/LuaTokenTypes;
    //   1787: areturn
    //   1788: getstatic com/androlua/LuaTokenTypes.DIV : Lcom/androlua/LuaTokenTypes;
    //   1791: areturn
    //   1792: getstatic com/androlua/LuaTokenTypes.MOD : Lcom/androlua/LuaTokenTypes;
    //   1795: areturn
    //   1796: getstatic com/androlua/LuaTokenTypes.MULT : Lcom/androlua/LuaTokenTypes;
    //   1799: areturn
    //   1800: getstatic com/androlua/LuaTokenTypes.BIT_TILDE : Lcom/androlua/LuaTokenTypes;
    //   1803: areturn
    //   1804: getstatic com/androlua/LuaTokenTypes.LT : Lcom/androlua/LuaTokenTypes;
    //   1807: areturn
    //   1808: getstatic com/androlua/LuaTokenTypes.GT : Lcom/androlua/LuaTokenTypes;
    //   1811: areturn
    //   1812: getstatic com/androlua/LuaTokenTypes.NOT : Lcom/androlua/LuaTokenTypes;
    //   1815: areturn
    //   1816: getstatic com/androlua/LuaTokenTypes.GETN : Lcom/androlua/LuaTokenTypes;
    //   1819: areturn
    //   1820: bipush #6
    //   1822: istore_1
    //   1823: aload_0
    //   1824: iload_1
    //   1825: invokevirtual yybegin : (I)V
    //   1828: aload_0
    //   1829: aload_0
    //   1830: invokevirtual yylength : ()I
    //   1833: invokevirtual yypushback : (I)V
    //   1836: iload_2
    //   1837: istore_1
    //   1838: aload #9
    //   1840: astore #8
    //   1842: goto -> 31
    //   1845: iconst_4
    //   1846: istore_1
    //   1847: goto -> 1823
    //   1850: getstatic com/androlua/LuaTokenTypes.RBRACK : Lcom/androlua/LuaTokenTypes;
    //   1853: areturn
    //   1854: getstatic com/androlua/LuaTokenTypes.ASSIGN : Lcom/androlua/LuaTokenTypes;
    //   1857: areturn
    //   1858: getstatic com/androlua/LuaTokenTypes.LBRACK : Lcom/androlua/LuaTokenTypes;
    //   1861: areturn
    //   1862: getstatic com/androlua/LuaTokenTypes.MINUS : Lcom/androlua/LuaTokenTypes;
    //   1865: areturn
    //   1866: getstatic com/androlua/LuaTokenTypes.DOT : Lcom/androlua/LuaTokenTypes;
    //   1869: areturn
    //   1870: getstatic com/androlua/LuaTokenTypes.PLUS : Lcom/androlua/LuaTokenTypes;
    //   1873: areturn
    //   1874: getstatic com/androlua/LuaTokenTypes.NUMBER : Lcom/androlua/LuaTokenTypes;
    //   1877: areturn
    //   1878: getstatic com/androlua/LuaTokenTypes.NAME : Lcom/androlua/LuaTokenTypes;
    //   1881: areturn
    //   1882: getstatic com/androlua/LuaTokenTypes.WHITE_SPACE : Lcom/androlua/LuaTokenTypes;
    //   1885: areturn
    //   1886: getstatic com/androlua/LuaTokenTypes.NEW_LINE : Lcom/androlua/LuaTokenTypes;
    //   1889: areturn
    //   1890: getstatic com/androlua/LuaTokenTypes.BAD_CHARACTER : Lcom/androlua/LuaTokenTypes;
    //   1893: areturn
    //   1894: aload_0
    //   1895: iconst_0
    //   1896: invokevirtual yybegin : (I)V
    //   1899: getstatic com/androlua/LuaTokenTypes.SHEBANG_CONTENT : Lcom/androlua/LuaTokenTypes;
    //   1902: areturn
    //   1903: goto -> 437
    //   1906: goto -> 453 }
  
  public final void yybegin(int paramInt) { this.j = paramInt; }
  
  public int yychar() { return this.q; }
  
  public final char yycharat(int paramInt) { return this.k[this.n + paramInt]; }
  
  public final void yyclose() {
    this.t = true;
    this.o = this.n;
    if (this.h != null)
      this.h.close(); 
  }
  
  public int yycolumn() { return this.r; }
  
  public final int yylength() { return this.l - this.n; }
  
  public int yyline() { return this.p; }
  
  public void yypushback(int paramInt) {
    if (paramInt > yylength())
      a(2); 
    this.l -= paramInt;
  }
  
  public final void yyreset(Reader paramReader) {
    this.h = paramReader;
    this.s = true;
    this.t = false;
    this.u = false;
    this.n = 0;
    this.o = 0;
    this.l = 0;
    this.m = 0;
    this.v = 0;
    this.r = 0;
    this.q = 0;
    this.p = 0;
    this.j = 0;
    if (this.k.length > 16384)
      this.k = new char[16384]; 
  }
  
  public final int yystate() { return this.j; }
  
  public final String yytext() { return new String(this.k, this.n, this.l - this.n); }
  
  static class CharSeqReader extends Reader {
    int a = 0;
    
    CharSequence b;
    
    CharSeqReader(CharSequence param1CharSequence) { this.b = param1CharSequence; }
    
    public void close() {
      this.b = null;
      this.a = 0;
    }
    
    public int read(char[] param1ArrayOfChar, int param1Int1, int param1Int2) {
      int j = Math.min(this.b.length() - this.a, param1Int2);
      int i = 0;
      param1Int2 = param1Int1;
      param1Int1 = i;
      while (true) {
        if (param1Int1 < j) {
          try {
            CharSequence charSequence = this.b;
            i = this.a;
            this.a = i + 1;
            char c = charSequence.charAt(i);
            param1ArrayOfChar[param1Int2] = c;
            param1Int2++;
          } catch (Exception exception) {}
          param1Int1++;
          continue;
        } 
        return (j <= 0) ? -1 : j;
      } 
    }
  }
}


/* Location:              D:\apk反编译\classes-dex2jar.jar!\com\androlua\LuaLexer.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.0.7
 */